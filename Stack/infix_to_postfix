#include<bits/stdc++.h>
using namespace std;
//check the operator precedence.
int precedence(char c)
{
    if(c == '^')
        return 3;
    else if(c == '*' || c== '/')
        return 2;
    else if(c == '+' || c== '-')
        return 1;
    else
        return -1;
}
string infix_to_postfix(string s)
{
    stack<char> st;
    string result; // taking result in new string and print it;
    for(int i=0; i<s.length(); i++)
    {
        if((s[i]>='a') && (s[i]<='z') || (s[i]>='A' && s[i]<='Z'))
        {
            result = result+s[i];
        }
        else if(s[i]=='(')
        {
            st.push(s[i]);
        }
        else if(s[i]== ')')
        {
            while(!st.empty() && st.top()!='(')
            {
                result = result + st.top();
                st.pop();
            }
            if(!st.empty())  // hide the closed first bracket.
            {
                //result = result + st.top();
                st.pop();
            }
        }
        else
        {
            while(!st.empty() && precedence(st.top())>precedence(s[i]))
            {
                result = result + st.top();
                st.pop();
            }
            st.push(s[i]);
        }

    }
    while(!st.empty()){
        result = result+st.top();
        st.pop();
    }

    return result;
}
int main()
{
    cout<<infix_to_postfix("a*(b+d)/e-f*(g+h/k)")<<endl;
    return 0;

}
